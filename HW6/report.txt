1.  Unbounded Knapsack
    (a) Describe a greedy solution.
        Calculate 'unit value' for each item in the beginning, then
        take as much as you can. If there are extra space, filling with
        the items that can fit with highest 'unit value'.

    (b) Show a counterexample to the greedy solution.
        Suppose a bag that can weight 10kg.
        Items:  weight(kg)      value   unit value
        item1   5.1             6       6/5.1 > 1
        item2   5               5       5/5 = 1
        If it is a greedy algorithm, item1 will be picked.
        Then it's value will be 6.
        But the optimal solution will be 10 by picking two item2.

    (c) Define the DP subproblem 
        Smaller bag.

    (d) Write the recurrence relations
        best(i) = max ( best( i - weight_j ) ) for each item j.

    (e) Do not forget base cases
        best(0) = 0 assume there is no item with 0 weight. 

    (f) Analyze the space and time complexities
        Time: O(w*n)
        Space: O(w)

2.  Bounded Knapsack
    # <items> is referring to the list of items, e.g., items[0] encodes the weight, value and number of item1.
 
    (a) Describe a greedy solution.
        It would be similar to unbounded case but additionally taking into account the number of items.
        When the most valuable item sold out, just taking the second valuable items, so on and so forth.

    (b) Show a counterexample to the greedy solution.
        Suppose a bag that can weight 10kg.
        Items:  weight(kg)      # of item       value   unit value
        item1   5.1             1               6       6/5.1 > 1
        item2   5               2               5       5/5 = 1
        Same thing happens here.
        We can only take 1 item1 or 2 item2. Using greedy algorithm will give a sub-optimal solution.

    (c) Define the DP subproblem 
        Reduce the size and the size of the item list in each recursion.
        No matter if an item is taken, once it is being considered, it is gone for the following sub-problems.

    (d) Write the recurrence relations
        Suppose x is the bag size.
        best(x, items) = max(  best(x - v_i * j, items[:-1])  ) for i in range( # of item i )

    (e) Do not forget base cases
        for all x == 0 or len(items) == 0, best(x, items) = 0

    (f) Analyze the space and time complexities
        Space: O( w * len(items) )

        Time: O( w * sum(items) )
